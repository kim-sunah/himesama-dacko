import { ConfigService } from '@nestjs/config';
import { videoview } from 'src/video/entities/videoview.entity';
import { Repository } from 'typeorm';
import { videocomment } from 'src/video/entities/videocomment.entity';
import { videolike } from 'src/video/entities/videolike.entity';
import { Video } from 'src/video/entities/video.entity';
import { Channellist } from 'src/channellist/entities/channellist.entity';
import { HttpService } from '@nestjs/axios';
import { SubscriberCount } from 'src/channellist/entities/subscriber.entity';
import { ViewCount } from 'src/channellist/entities/view.entity';
import { VideoCount } from 'src/channellist/entities/video.entity';
export declare class UpdateService {
    private readonly videoviewRepository;
    private readonly videocommentRepository;
    private readonly videolikeRepository;
    private readonly VideoRepository;
    private readonly ChannelListRepository;
    private readonly SubscriberCountRepository;
    private readonly ViewCountRepository;
    private readonly VideoCountRepository;
    private configService;
    private httpService;
    private readonly logger;
    private readonly BATCH_SIZE;
    constructor(videoviewRepository: Repository<videoview>, videocommentRepository: Repository<videocomment>, videolikeRepository: Repository<videolike>, VideoRepository: Repository<Video>, ChannelListRepository: Repository<Channellist>, SubscriberCountRepository: Repository<SubscriberCount>, ViewCountRepository: Repository<ViewCount>, VideoCountRepository: Repository<VideoCount>, configService: ConfigService, httpService: HttpService);
    private delay;
    ChartDataUpdate(): Promise<void>;
    getChannelInfo(ChannelId: string): Promise<import("axios").AxiosResponse<any, any>>;
    DailyChannelUpdate(): Promise<void>;
    private DayilySubscriberprocessBatch;
    private SubscriberUpdate;
    DailyViewChannelUpdate(): Promise<void>;
    private DayilyViewprocessBatch;
    private ViewUpdate;
    DailyVideoChannelUpdate(): Promise<void>;
    private DayilyVideoprocessBatch;
    private VideoUpdate;
    removeDuplicates(): Promise<void>;
    private removeDuplicateChannels;
    private removeDuplicateVideos;
    DayCountUpdate(duration: string): Promise<void>;
    WeekCountUpdate(duration: string): Promise<void>;
    MonthCountUpdate(duration: string): Promise<void>;
    private processBatch;
    private processChannel;
    private deleteChannelData;
    private updateChannelData;
    private getApiUrl;
    private calculateNewData;
    Clickreset(): Promise<void>;
}
